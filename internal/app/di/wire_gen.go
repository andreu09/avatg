// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"avatg/internal/app/config"
	"avatg/internal/app/http"
	"avatg/internal/app/service"
	"avatg/internal/app/service/telegram"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	http2 "net/http"
)

// Injectors from wire.go:

func InitializeApp(cfg config.Config) (*App, func(), error) {
	appConfig := appConfigProvider(cfg)
	serverConfig := ServerConfigProvider(cfg)
	pingHandler := http.ProvidePingHandler()
	telegramTelegram := telegram.ProvideTelegram()
	telegramHandler := http.ProvideTelegramHandler(telegramTelegram)
	engine := http.ProvideRouter(pingHandler, telegramHandler)
	server, err := http.ProvideServer(serverConfig, engine)
	if err != nil {
		return nil, nil, err
	}
	app, cleanup := AppProvider(appConfig, server)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

var AppSet = wire.NewSet(
	appConfigProvider,
	AppProvider,

	serverSet,
	TelegramSet,
)

var serverSet = wire.NewSet(
	ServerConfigProvider, http.ProvideServer, http.ProvideRouter, http.ProvidePingHandler, http.ProvideTelegramHandler, wire.Bind(new(http2.Handler), new(*gin.Engine)),
)

var TelegramSet = wire.NewSet(
	TelegramConfigProvider, telegram.ProvideTelegram, wire.Bind(new(service.Telegram), new(*telegram.Telegram)),
)

func appConfigProvider(cfg config.Config) AppConfig {
	return AppConfig{
		serverAddr: cfg.ServerAddr,
	}
}

func ServerConfigProvider(cfg config.Config) http.ServerConfig {
	return http.ServerConfig{
		Addr: cfg.ServerAddr,
	}
}

func TelegramConfigProvider(cfg config.Config) telegram.Config {
	return telegram.Config{}
}
